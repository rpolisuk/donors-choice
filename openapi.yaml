openapi: 3.0.1
info:
  title: Donor's Choice API
  description: Donor's Choice Project Application API
  version: 0.0.1

servers:
  - url: 'http://localhost:3000/'
    description: Localhost running on your computer
  - url: 'https://arcane-escarpment-54741.herokuapp.com/'
    description: Heroku site

paths:

# /users/signup POST configuration:
# No parameters are configured for a POST
  /users/signup:
    post:
      summary: Used to sign up a new user to the system
      description: Signup to the system
      requestBody:
        description: User information required to create an account
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: Richard
                lastname:
                  type: string
                  example: Polisuk
                username:
                  type: string
                  example: email@example.com
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: User is logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: string
                    example: Registration Successful!
        '422':
          description: Error: Unprocessable Entity

# /users/login POST configuration:
  /users/login:
    post:
      summary: Log into the system
      description: Log in to the system with a valid userid
      requestBody:
        description: User that is allowed to log in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginSend'
        required: false
      responses:
        '200':
          description: User is logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginReceive'
        '401':
          description: User is not authorized

# /charities GET configuration: 
  /charities:
    get:
      summary: Get the charity information
      description: Return all the details charity information.
      parameters:
        - in: query
          name: legalname
          schema:
            type: string
            example: Seneca
          required: true
        - in: query
          name: page
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Your request charities have been successfully returned.
          content:
            application/json:
              schema:
                properties:
                  charities: 
                    type: array
                    items: 
                        type: object
                        properties: 
                          businessnumber: 
                            type: string
                            example: 107967168RR0001
                          legalname: 
                            type: string
                            example: SENECA COLLEGE OF APPLIED ARTS & TECHNOLOGY
                          addressline1: 
                            type: string
                            example: NAAZ MOHAMED DIRECTOR FINANCE
                          addressline2: 
                            type: string
                            example: 1750 FINCH AVENUE EAST
                          city: 
                            type: string
                            example: TORONTO
                          province: 
                            type: string
                            example: ON
                          postalcode: 
                            type: string
                            example: M2J2X5
                          phone: 
                            type: string
                            example: (416) 491-5050
                          _id: 
                            type: string
                            example: 6092d2ba9005b33f68ec5a67
                  totalPages: 
                    type: integer
                    format: int32
                    example: 1
                  currentPage: 
                    type: string
                    example: 1

  '/users/{userId}/change-password/':
    put:
      security:
        - bearerAuth: []
      summary: Change the password for the userId
      parameters:
        - name: userId
          in: path
          description: Object ID of the user that we need to change the password for.
          required: true
          schema:
            type: string
            example: 60993327ec96260d40d3bda5
      requestBody:
        description: User with new values of properties
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  example: password
                  required: true
                new_password:
                  type: string
                  example: password
                  required: true
      responses:
        '200':
          description: User is deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: User is not authorized
        '404':
          description: Argument passed in must be a single String of 12 bytes or a string of 24 hex characters OR password or username is incorrect
#                
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # Schema for input of /users/login
    UserLoginSend:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          example: email@example.com
        password:
          type: string
          example: password
    # Schema for output of /users/login
    UserLoginReceive:
      type: object
      properties:
        success:
          type: boolean
        token:
          type: string
        _id:
          type: string
        status:
          type: string
    # Schema for output of /users
    UserGetReceive:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        admin:
          type: boolean
        _id:
          type: string
        username:
          type: string
        __v:
          type: integer
          
    User:
      required:
        - _id
        - companies
        - name
      type: object
      properties:
        _id:
          type: integer
        isPublic:
          type: boolean
        name:
          type: string
        books:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              amount:
                type: number
        companies:
          type: array
          items:
            type: string
    updateUser:
      required:
        - companies
        - name
      type: object
      properties:
        isPublic:
          type: boolean
        name:
          type: string
        books:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              amount:
                type: number
        companies:
          type: array
          items:
            type: string